{"version":3,"sources":["components/DatePicker/index.ts","components/DatePicker/DatePicker.tsx","components/SelectionBar/index.ts","components/SelectionBar/SelectionBar.tsx","components/Layout/index.ts","components/Layout/Layout.tsx","storage.ts","components/ImageCard/index.ts","components/ImageCard/ImageCard.tsx","components/DisplayGrid/index.ts","components/DisplayGrid/DisplayGrid.tsx","constants.ts","api.ts","components/ImageContainer/index.ts","components/ImageContainer/ImageContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DatePicker","id","label","date","onChange","libInstance","moment","utils","MomentUtils","disableToolbar","allowKeyboardControl","variant","format","margin","autoOk","inputValue","value","maxDate","Date","KeyboardButtonProps","SelectionBar","startDate","clicker","setStartDate","setClicker","className","aria-label","aria-labelledby","type","onClick","Layout","children","store","require","ImageCard","image","useState","isExpanded","setExpanded","get","imageUrl","isLiked","setLiked","title","explanation","useEffect","set","alt","src","aria-pressed","aria-expanded","DisplayGrid","isLoading","images","CircularProgress","map","index","API_URL","client","axios","create","baseURL","timeout","axiosRetry","retries","shouldResetTimeout","retryDelay","retryCount","ImageContainer","setImages","setLoading","endDate","fetchImages","URL","API","then","response","processImages","data","catch","err","console","log","alert","finally","media_type","thumbnail_url","url","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6de6944.chunk.js","sourcesContent":["import DatePicker from './DatePicker';\n\nexport default DatePicker;\n","import { ReactElement } from 'react';\nimport {\n\tMuiPickersUtilsProvider,\n\tKeyboardDatePicker,\n} from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport moment from 'moment';\n\nimport './styles.scss';\n\ntype Props = {\n\tid: string;\n\tlabel: string;\n\tdate: string;\n\tonChange: (date: string) => void;\n};\n\n/**\n * @description The DataPicker component is a component for selecting dates using the Material UI Pickers\n *\n * @param {string} id\n * @param {string} label\n * @param {string} date\n * @param {function} onChange\n * @returns ReactElement\n */\nconst DatePicker = ({ id, label, date, onChange }: Props): ReactElement => (\n\t<MuiPickersUtilsProvider libInstance={moment} utils={MomentUtils}>\n\t\t<KeyboardDatePicker\n\t\t\tid={id}\n\t\t\tlabel={label}\n\t\t\tdisableToolbar\n\t\t\tallowKeyboardControl={false}\n\t\t\tvariant=\"inline\"\n\t\t\tformat=\"YYYY-MM-DD\"\n\t\t\tmargin=\"normal\"\n\t\t\tautoOk={true}\n\t\t\tinputValue={date}\n\t\t\tvalue={date}\n\t\t\tonChange={(date, value) => onChange(value as string)}\n\t\t\tmaxDate={new Date()}\n\t\t\tKeyboardButtonProps={{\n\t\t\t\t'aria-label': 'change date',\n\t\t\t}}\n\t\t/>\n\t</MuiPickersUtilsProvider>\n);\n\nexport default DatePicker;\n","import SelectionBar from './SelectionBar';\n\nexport default SelectionBar;\n","import { ReactElement } from 'react';\n\nimport DatePicker from './../DatePicker';\n\nimport './styles.scss';\n\ntype Props = {\n\tstartDate: string;\n\tclicker: number;\n\tsetStartDate: (startDate: string) => void;\n\tsetClicker: (clicker: number) => void;\n};\n\n/**\n * @description The SelectionBar is a component that allows the user to select their input for the API as well as allows them to fetch the images\n *\n * @param {string} startDate\n * @param {number} clicker\n * @param {function} setStartDate\n * @param {function} setClicker\n * @returns ReactElement\n */\nconst SelectionBar = ({\n\tstartDate,\n\tclicker,\n\tsetStartDate,\n\tsetClicker,\n}: Props): ReactElement => {\n\tconst handlePullImagesButtonClick = (): void => {\n\t\tsetClicker(clicker + 1);\n\t};\n\n\treturn (\n\t\t<div id=\"selection-bar\" className=\"selection-bar\">\n\t\t\t<DatePicker\n\t\t\t\tid=\"start-date\"\n\t\t\t\tlabel=\"Select Start Date\"\n\t\t\t\tdate={startDate}\n\t\t\t\tonChange={setStartDate}\n\t\t\t\taria-label=\"Select Start Date\"\n\t\t\t\taria-labelledby=\"selection-bar\"\n\t\t\t/>\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclassName=\"btn ripple\"\n\t\t\t\tonClick={handlePullImagesButtonClick}\n\t\t\t\taria-label=\"Click Here To Pull Images\"\n\t\t\t\taria-labelledby=\"selection-bar\"\n\t\t\t>\n\t\t\t\tClick Here To Pull Images\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default SelectionBar;\n","import Layout from './Layout';\n\nexport default Layout;\n","import { ReactElement } from 'react';\n\nimport './styles.scss';\n\ntype Props = {\n\tchildren: ReactElement[];\n};\n\n/**\n * @description The Layout component is a component that contains all of the elements of the website\n *\n * @param {ReactElement[]} children\n * @returns ReactElement\n */\nconst Layout = ({ children }: Props): ReactElement => {\n\treturn <div className=\"layout\">{children}</div>;\n};\n\nexport default Layout;\n","const store = require('store');\n\nexport default store;\n","import ImageCard from './ImageCard';\n\nexport default ImageCard;\n","import { ReactElement, useEffect, useState } from 'react';\n\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\nimport './styles.scss';\n\nimport store from './../../storage';\n\ntype Props = {\n\timage: any;\n};\n\n/**\n * @description The ImageCard component is a component for displaying the information about each image\n *\n * @param {object} image\n * @returns ReactElement\n */\nconst ImageCard = ({ image }: Props): ReactElement => {\n\tconst [isExpanded, setExpanded] = useState<boolean>(false);\n\tconst [isLiked, setLiked] = useState<boolean>(\n\t\tstore.get(image.imageUrl) || false\n\t);\n\n\tconst { date, title, imageUrl, explanation } = image;\n\n\tuseEffect(() => {\n\t\tstore.set(imageUrl, isLiked);\n\t}, [isLiked]);\n\n\tconst toggleLiked = (): void => {\n\t\tsetLiked(!isLiked);\n\t};\n\n\tconst toggleExpanded = (): void => {\n\t\tsetExpanded(!isExpanded);\n\t};\n\n\treturn (\n\t\t<div id=\"image-card\" className=\"image-card\">\n\t\t\t<div id=\"image-header\">\n\t\t\t\t<p\n\t\t\t\t\tid=\"image-title\"\n\t\t\t\t\tclassName=\"image-title\"\n\t\t\t\t\taria-label={title}\n\t\t\t\t\taria-labelledby=\"image-header\"\n\t\t\t\t>\n\t\t\t\t\t{title}\n\t\t\t\t</p>\n\t\t\t\t<p\n\t\t\t\t\tid=\"image-date\"\n\t\t\t\t\tclassName=\"image-date\"\n\t\t\t\t\taria-label={date}\n\t\t\t\t\taria-labelledby=\"image-header\"\n\t\t\t\t>\n\t\t\t\t\t{date}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<img\n\t\t\t\tid=\"image-media\"\n\t\t\t\talt={title}\n\t\t\t\tsrc={imageUrl}\n\t\t\t\tclassName=\"image-media\"\n\t\t\t/>\n\t\t\t<div className=\"btn-section\">\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tid=\"like-button\"\n\t\t\t\t\t\tclassName=\"like-btn\"\n\t\t\t\t\t\tonClick={toggleLiked}\n\t\t\t\t\t\taria-pressed={isLiked}\n\t\t\t\t\t\taria-label=\"Like Button\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{isLiked ? (\n\t\t\t\t\t\t\t<FavoriteIcon className=\"liked-btn\" />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<FavoriteBorderIcon />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tid=\"expand-button\"\n\t\t\t\t\t\tclassName=\"expand-btn\"\n\t\t\t\t\t\tonClick={toggleExpanded}\n\t\t\t\t\t\taria-expanded={isExpanded}\n\t\t\t\t\t\taria-label=\"Expand Button\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ExpandMoreIcon\n\t\t\t\t\t\t\tclassName={`expand ${\n\t\t\t\t\t\t\t\tisExpanded ? 'expand-open' : ''\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{isExpanded && (\n\t\t\t\t<div\n\t\t\t\t\tid=\"image-description\"\n\t\t\t\t\tclassName=\"image-description\"\n\t\t\t\t\taria-label={explanation}\n\t\t\t\t\taria-labelledby=\"expand-button\"\n\t\t\t\t>\n\t\t\t\t\t{explanation}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default ImageCard;\n","import DisplayGrid from './DisplayGrid';\n\nexport default DisplayGrid;\n","import { Fragment, ReactElement } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ImageCard from './../ImageCard';\n\nimport './styles.scss';\n\ntype Props = {\n\tisLoading: boolean;\n\timages: any[];\n};\n\n/**\n * @description The DisplayGrid component is a component for displaying all of the images\n *\n * @param {boolean} isLoading\n * @param {object[]} images\n * @returns ReactElement\n */\nconst DisplayGrid = ({ isLoading, images }: Props): ReactElement => {\n\treturn (\n\t\t<Fragment>\n\t\t\t{isLoading ? (\n\t\t\t\t<CircularProgress />\n\t\t\t) : (\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t{images.map((image: any, index: number) => (\n\t\t\t\t\t\t<ImageCard key={index} image={image} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Fragment>\n\t);\n};\n\nexport default DisplayGrid;\n","export const API_KEY = `U2TiaNUBuC9WfVnbkXciJtbq7Z5KJxaFrnJkx0nJ`;\n\nexport const API_URL = `https://api.nasa.gov/planetary/apod`;\n","import axios from 'axios';\nimport axiosRetry from 'axios-retry';\n\nimport { API_URL } from './constants';\n\nconst client = axios.create({\n\tbaseURL: API_URL, // assigning base URL for endpoints\n\ttimeout: 10_000, // setting timeout to 10 seconds\n});\n\naxiosRetry(client, {\n\tretries: 3, // number of retries before giving up\n\tshouldResetTimeout: true, // resetting timeout between each retry\n\tretryDelay: retryCount => {\n\t\treturn retryCount * 2000; // time interval between retries\n\t},\n});\n\nexport default client;\n","import ImageContainer from './ImageContainer';\n\nexport default ImageContainer;\n","import { ReactElement, useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { AxiosResponse } from 'axios';\n\nimport DisplayGrid from './../DisplayGrid';\n\nimport API from './../../api';\nimport { API_URL, API_KEY } from './../../constants';\n\nimport './styles.scss';\n\ntype Props = {\n\tstartDate: string;\n\tclicker: number;\n};\n\n/**\n * @description The ImageContainer component is a component for fetching the images from NASA's API before displaying them. (Employs the Container Component Pattern to separate the logic and the view)\n *\n * @param {string} startDate\n * @param {number} clicker\n * @returns ReactElement\n */\nconst ImageContainer = ({ startDate, clicker }: Props): ReactElement => {\n\tconst [images, setImages] = useState<any[]>([]);\n\tconst [isLoading, setLoading] = useState<boolean>(false);\n\n\tconst endDate: string = moment().format('YYYY-MM-DD');\n\n\tuseEffect(() => {\n\t\tfetchImages();\n\t}, [clicker]);\n\n\t// Fetching images from NASA API, timeout set to 10 seconds\n\tconst fetchImages = (): void => {\n\t\tsetLoading(true);\n\t\tconst URL: string = `${API_URL}?api_key=${API_KEY}&start_date=${startDate}&end_date=${endDate}&thumbs=true`;\n\t\tAPI.get(URL)\n\t\t\t.then((response: AxiosResponse<any>) => {\n\t\t\t\tsetImages(processImages(response.data));\n\t\t\t})\n\t\t\t.catch((err: any) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\talert(`Error occurred while fetching images.`);\n\t\t\t\tsetImages([]);\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tsetLoading(false);\n\t\t\t});\n\t};\n\n\t// Retrieving the appropriate image url for each image object (for the case where the media type is video and so the url property points to a video and not an image)\n\tconst processImages = (images: any[]): any[] => {\n\t\treturn images.map((image: any): any => {\n\t\t\tconst { media_type, thumbnail_url, url } = image;\n\n\t\t\t// If media_type is video and then assign the video thumbnail as the display image\n\t\t\tconst imageUrl =\n\t\t\t\tmedia_type === 'video' && thumbnail_url !== ''\n\t\t\t\t\t? thumbnail_url\n\t\t\t\t\t: url;\n\n\t\t\treturn { ...image, ...{ imageUrl: imageUrl } };\n\t\t});\n\t};\n\n\treturn <DisplayGrid images={images} isLoading={isLoading} />;\n};\n\nexport default ImageContainer;\n","import React, { useState } from 'react';\nimport moment from 'moment';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport SelectionBar from './components/SelectionBar';\nimport Layout from './components/Layout';\nimport ImageContainer from './components/ImageContainer';\n\nfunction App() {\n\tconst [startDate, setStartDate] = useState<string>(\n\t\tmoment().format('YYYY-MM-DD')\n\t);\n\tconst [clicker, setClicker] = useState<number>(0);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Layout>\n\t\t\t\t<header>\n\t\t\t\t\t<h1 className=\"header-title\">Spacestagram</h1>\n\t\t\t\t\t<h2 className=\"subheader-title\">\n\t\t\t\t\t\tImage-sharing from the final frontier\n\t\t\t\t\t</h2>\n\t\t\t\t</header>\n\t\t\t\t<main>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<SelectionBar\n\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\tclicker={clicker}\n\t\t\t\t\t\t\tsetStartDate={setStartDate}\n\t\t\t\t\t\t\tsetClicker={setClicker}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<ImageContainer\n\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\tclicker={clicker}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</section>\n\t\t\t\t</main>\n\t\t\t</Layout>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}