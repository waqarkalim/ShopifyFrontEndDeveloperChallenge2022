{"version":3,"sources":["constants.ts","components/DatePicker/index.ts","components/DatePicker/DatePicker.tsx","components/SelectionBar/index.ts","components/SelectionBar/SelectionBar.tsx","components/Layout/index.ts","components/Layout/Layout.tsx","components/ImageCard/index.ts","components/ImageCard/ImageCard.tsx","api/index.ts","storage.ts","components/ImageContainer/index.ts","components/ImageContainer/ImageContainer.tsx","config.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["API_URL","SHOPIFY_IS_AWESOME","DATE_FORMAT","DatePicker","id","label","date","onChange","handleDateChange","value","libInstance","moment","utils","MomentUtils","disableToolbar","variant","format","margin","autoOk","inputValue","maxDate","Date","KeyboardButtonProps","SelectionBar","startDate","clicker","setStartDate","setClicker","buttonDisabled","className","aria-label","type","onClick","disabled","Layout","children","ImageCard","image","toggleLiked","useState","isExpanded","setExpanded","title","imageUrl","explanation","isLiked","alt","src","aria-pressed","aria-expanded","aria-controls","role","hidden","aria-labelledby","aria-hidden","client","axios","create","baseURL","_","require","store","ImageContainer","setButtonDisabled","images","setImages","isLoading","setLoading","endDate","useEffect","key","data","get","console","log","set","reduce","acc","curr","retrieveImages","thumbs","JSON","stringify","then","response","fetchImages","processImages","catch","err","error","code","Error","handleError","message","alert","finally","map","index","media_type","thumbnail_url","url","newArr","array","omit","updateLikeStatusInLocalStorage","CircularProgress","App","window","open","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.530c5267.chunk.js","sourcesContent":["export const API_KEY = `U2TiaNUBuC9WfVnbkXciJtbq7Z5KJxaFrnJkx0nJ`;\n\nexport const API_URL = `https://api.nasa.gov/planetary/apod`;\n\nexport const SHOPIFY_IS_AWESOME = `Shopify_is_Awesome`; // Key used to store like status of each image in local storage\n\nexport const PERSONAL_WEBSITE_URL = `https://waqarkalim.github.io`;\n\nexport const DATE_FORMAT = 'YYYY-MM-DD';\n","import DatePicker from './DatePicker';\n\nexport default DatePicker;\n","import { ReactElement } from 'react';\nimport {\n\tMuiPickersUtilsProvider,\n\tKeyboardDatePicker,\n} from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport moment from 'moment';\n\nimport { DATE_FORMAT } from './../../constants';\n\nimport './styles.scss';\n\ntype Props = {\n\tid: string;\n\tlabel: string;\n\tdate: string;\n\tonChange: (date: string) => void;\n};\n\n/**\n * @description The DataPicker component is a component for selecting dates using the Material UI Pickers\n *\n * @param {string} id\n * @param {string} label\n * @param {string} date\n * @param {function} onChange\n * @returns ReactElement\n */\nconst DatePicker = ({ id, label, date, onChange }: Props): ReactElement => {\n\tconst handleDateChange = (value: string) => {\n\t\tonChange(value);\n\t};\n\n\treturn (\n\t\t<MuiPickersUtilsProvider libInstance={moment} utils={MomentUtils}>\n\t\t\t<KeyboardDatePicker\n\t\t\t\tid={id}\n\t\t\t\tlabel={label}\n\t\t\t\tdisableToolbar // Disable toolbar on date picker\n\t\t\t\tvariant=\"inline\"\n\t\t\t\tformat={DATE_FORMAT}\n\t\t\t\tmargin=\"normal\"\n\t\t\t\tautoOk={true}\n\t\t\t\tinputValue={date}\n\t\t\t\tvalue={date}\n\t\t\t\tonChange={(date, value) => handleDateChange(value as string)}\n\t\t\t\tmaxDate={new Date()} // Set today's date as the max start date\n\t\t\t\tKeyboardButtonProps={{\n\t\t\t\t\t'aria-label': 'change date',\n\t\t\t\t}}\n\t\t\t/>\n\t\t</MuiPickersUtilsProvider>\n\t);\n};\n\nexport default DatePicker;\n","import SelectionBar from './SelectionBar';\n\nexport default SelectionBar;\n","import { ReactElement } from 'react';\n\nimport DatePicker from './../DatePicker';\n\nimport './styles.scss';\n\ntype Props = {\n\tstartDate: string;\n\tclicker: number;\n\tsetStartDate: (startDate: string) => void;\n\tsetClicker: (clicker: number) => void;\n\tbuttonDisabled: boolean;\n};\n\n/**\n * @description The SelectionBar is a component that allows the user to select their input for the API as well as allows them to fetch the images\n */\nconst SelectionBar = ({\n\tstartDate,\n\tclicker,\n\tsetStartDate,\n\tsetClicker,\n\tbuttonDisabled,\n}: Props): ReactElement => {\n\tconst handlePullImagesButtonClick = (): void => {\n\t\tsetClicker(clicker + 1);\n\t};\n\n\treturn (\n\t\t<div id=\"selection-bar\" className=\"selection-bar\">\n\t\t\t{/* The date input component to select the starting date for the API  */}\n\t\t\t<DatePicker\n\t\t\t\tid=\"start-date\"\n\t\t\t\tlabel=\"Select Start Date\"\n\t\t\t\tdate={startDate}\n\t\t\t\tonChange={setStartDate}\n\t\t\t\taria-label=\"Select Start Date\"\n\t\t\t/>\n\n\t\t\t{/* Easter Egg Indicator */}\n\t\t\t<div className=\"easter-egg-text\">\n\t\t\t\t<p>There might be an easter egg in the headings</p>\n\t\t\t</div>\n\n\t\t\t{/* The button that is clicked to pull the data from the API  */}\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclassName=\"btn ripple\"\n\t\t\t\tonClick={handlePullImagesButtonClick}\n\t\t\t\taria-label=\"Click Here To Pull Images\"\n\t\t\t\tdisabled={buttonDisabled}\n\t\t\t>\n\t\t\t\tClick Here To Pull Images\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default SelectionBar;\n","import Layout from './Layout';\n\nexport default Layout;\n","import { ReactElement } from 'react';\n\nimport './styles.scss';\n\ntype Props = {\n\tchildren: ReactElement[];\n};\n\n/**\n * @description The Layout component is a component that contains all of the elements of the website\n *\n * @param {ReactElement[]} children\n * @returns ReactElement\n */\nconst Layout = ({ children }: Props): ReactElement => {\n\treturn <div className=\"layout\">{children}</div>;\n};\n\nexport default Layout;\n","import ImageCard from './ImageCard';\n\nexport default ImageCard;\n","import { ReactElement, useState } from 'react';\n\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\nimport { Image } from './../../types';\n\nimport './styles.scss';\n\ntype Props = {\n\timage: Image;\n\ttoggleLiked: (index: number) => void;\n};\n\n/**\n * @description The ImageCard component is a component for displaying the information about each image\n */\nconst ImageCard = ({ image, toggleLiked }: Props): ReactElement => {\n\tconst [isExpanded, setExpanded] = useState<boolean>(false);\n\n\tconst { id, date, title, imageUrl, explanation, isLiked } = image;\n\n\tconst toggleExpanded = (): void => {\n\t\tsetExpanded(!isExpanded);\n\t};\n\n\treturn (\n\t\t<div id={`image-card-${id}`} className=\"image-card\">\n\t\t\t{/* Displaying the header titles of each image card */}\n\t\t\t<div id={`image-header-${id}`}>\n\t\t\t\t<div\n\t\t\t\t\tid={`image-title-${id}`}\n\t\t\t\t\tclassName=\"image-title\"\n\t\t\t\t\taria-label={title}\n\t\t\t\t>\n\t\t\t\t\t<p>{title}</p>\n\t\t\t\t</div>\n\t\t\t\t<div id={`image-date-${id}`} className=\"image-date\" aria-label={date}>\n\t\t\t\t\t<p>{date}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{/* Displaying the actual image of each image card */}\n\t\t\t<img\n\t\t\t\tid={`image-media-${id}`}\n\t\t\t\tclassName=\"image-media\"\n\t\t\t\talt={title}\n\t\t\t\tsrc={imageUrl}\n\t\t\t/>\n\n\t\t\t{/* Displaying the like button and the expand description button for each image card */}\n\t\t\t<div className=\"btn-section\">\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tid={`like-button-${id}`}\n\t\t\t\t\t\tclassName=\"like-btn\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\ttoggleLiked(id);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\taria-pressed={isLiked}\n\t\t\t\t\t\taria-label=\"Like Button\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{isLiked ? (\n\t\t\t\t\t\t\t<FavoriteIcon className=\"liked-btn\" />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<FavoriteBorderIcon />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tid={`expand-button-${id}`}\n\t\t\t\t\t\tclassName=\"expand-btn\"\n\t\t\t\t\t\tonClick={toggleExpanded}\n\t\t\t\t\t\taria-expanded={isExpanded}\n\t\t\t\t\t\taria-label=\"Expand Button\"\n\t\t\t\t\t\taria-controls=\"image-description\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ExpandMoreIcon\n\t\t\t\t\t\t\tclassName={`expand ${isExpanded ? 'expand-open' : ''}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{/* The hidden image description section that can only be shown when the `expand-button-${id}` button is clicked */}\n\t\t\t<div\n\t\t\t\trole=\"region\"\n\t\t\t\tid={`image-description-${id}`}\n\t\t\t\tclassName=\"image-description\"\n\t\t\t\thidden={!isExpanded}\n\t\t\t\taria-label={explanation}\n\t\t\t\taria-labelledby={`expand-button-${id}`}\n\t\t\t\taria-hidden={!isExpanded}\n\t\t\t>\n\t\t\t\t<p>{explanation}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ImageCard;\n","import { API_KEY } from '../config';\nimport { API_URL } from './../constants';\nimport { Image } from './../types';\nimport axios from 'axios';\n\nconst client = axios.create({\n\tbaseURL: API_URL, // assigning base URL for endpoints\n});\n\nexport const fetchImages = (\n\tstartDate: string,\n\tendDate: string,\n\tthumbs: boolean\n): Promise<Image[]> => {\n\treturn client\n\t\t.get(\n\t\t\t`${API_URL}?api_key=${API_KEY}&start_date=${startDate}&end_date=${endDate}&thumbs=${JSON.stringify(\n\t\t\t\tthumbs\n\t\t\t)}`\n\t\t)\n\t\t.then(response => response.data);\n};\n\nexport const handleError = (error: any): Error => {\n\tif (error.response.data.code === 500)\n\t\treturn new Error(\n\t\t\t'Error occurred, please try again with a start date nearer to today'\n\t\t);\n\n\treturn new Error('Error occurred while fetching data');\n};\n","import { Image } from './types';\n\nconst _ = require('lodash');\n\nconst store = require('store');\n\nexport const repopulateLikeStatusInLocalStorage = (\n\tkey: string,\n\tdata: Image[]\n): void => {\n\tconsole.log('Repopulating...');\n\tstore.set(\n\t\tkey,\n\t\tdata.reduce((acc: Record<string, boolean>, curr: Image) => {\n\t\t\tif (curr.isLiked) {\n\t\t\t\tacc[curr.imageUrl] = curr.isLiked;\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {})\n\t);\n\tconsole.log('Repopulation done!');\n};\n\nexport const updateLikeStatusInLocalStorage = (\n\tkey: string,\n\tarray: Image[],\n\tindex: number\n): void => {\n\tconsole.log('Updating like status in local storage...');\n\tif (array[index].isLiked)\n\t\tstore.set(key, {\n\t\t\t...store.get(key),\n\t\t\t...{ [array[index].imageUrl]: array[index].isLiked },\n\t\t});\n\telse store.set(key, _.omit(store.get(key), array[index].imageUrl));\n\tconsole.log('Like status updated in local storage!');\n};\n\nexport default store;\n","import ImageContainer from './ImageContainer';\n\nexport default ImageContainer;\n","import { Fragment, ReactElement, useEffect, useState } from 'react';\nimport moment from 'moment';\n\nimport { CircularProgress } from '@material-ui/core';\nimport ImageCard from '../ImageCard';\n\nimport { fetchImages, handleError } from '../../api';\n\nimport { DATE_FORMAT, SHOPIFY_IS_AWESOME } from './../../constants';\n\nimport { Image } from './../../types';\n\nimport store, {\n\trepopulateLikeStatusInLocalStorage,\n\tupdateLikeStatusInLocalStorage,\n} from './../../storage';\n\nimport './styles.scss';\n\ntype Props = {\n\tstartDate: string;\n\tclicker: number;\n\tsetButtonDisabled: (buttonDisabled: boolean) => void;\n};\n\nconst VIDEO_MEDIA_TYPE: string = 'video';\n\n/**\n * @description The ImageContainer component is a component for fetching the images from NASA's API before displaying them. (Employs the Container Component Pattern to separate the logic and the view)\n */\nconst ImageContainer = ({\n\tstartDate,\n\tclicker,\n\tsetButtonDisabled,\n}: Props): ReactElement => {\n\tconst [images, setImages] = useState<Image[]>([]);\n\tconst [isLoading, setLoading] = useState<boolean>(false);\n\n\tconst endDate: string = moment().format(DATE_FORMAT);\n\n\t// Whenever the images are updated, if the local storage does not contain any key for the images' like status, the local storage gets repopulated with the like information stored in the state\n\tuseEffect(() => {\n\t\tif (!store.get(SHOPIFY_IS_AWESOME))\n\t\t\trepopulateLikeStatusInLocalStorage(SHOPIFY_IS_AWESOME, images);\n\t}, [images]);\n\n\t// Whenever the pull images button is pressed, the images are retrieved\n\tuseEffect(() => {\n\t\tretrieveImages(startDate, endDate);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [clicker]);\n\n\t/**\n\t * @description The retrieveImages() function fetches the images from the API, processes those images to contain the relevant informations that we need, and then sets those images to our images state\n\t * @param startDate The starting date from when the API should return the images\n\t * @param endDate The ending date to when the API should return the images\n\t */\n\tconst retrieveImages = (startDate: string, endDate: string) => {\n\t\tsetButtonDisabled(true);\n\t\tsetLoading(true);\n\t\tfetchImages(startDate, endDate, true)\n\t\t\t.then((data: Image[]) => {\n\t\t\t\tsetImages(processImages(data));\n\t\t\t})\n\t\t\t.catch((err: any) => {\n\t\t\t\tconst error: Error = handleError(err);\n\n\t\t\t\tif (error.message) alert(error.message);\n\t\t\t\telse alert(`Error occurred while fetching images.`);\n\n\t\t\t\tsetImages([]);\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tsetLoading(false);\n\t\t\t\tsetButtonDisabled(false);\n\t\t\t});\n\t};\n\n\t/**\n\t * @description The processImages() function adds a few important properties to each image object, properties such as an id property (the id to reference the image object by), an imageUrl property (the actual url pointing to the image we are going to display), and the isLiked property (the liked/unliked status of an image)\n\t * @param images An array of Images - images that are retrieved from the API\n\t * @returns An array of Images with the added relevant properties\n\t */\n\tconst processImages = (images: Image[]): Image[] => {\n\t\treturn images.map((image: Image, index: number): Image => {\n\t\t\tconst { media_type, thumbnail_url, url } = image;\n\n\t\t\t// As the API does not return any unique id for each image and the code is only using the id for accessiblity purposes, we are considering the array index as our unique id\n\t\t\tconst id: number = index;\n\n\t\t\t// Assign the video thumbnail as the display image if media_type is video and thumbnail exists, if it isn't then use url as the display image url\n\t\t\tconst imageUrl: string =\n\t\t\t\tmedia_type === VIDEO_MEDIA_TYPE && thumbnail_url !== ''\n\t\t\t\t\t? thumbnail_url\n\t\t\t\t\t: url;\n\n\t\t\t// Assigns the like status of an image from local storage, if it doesn't exist in local storage, then it defaults to false\n\t\t\tconst isLiked: boolean = store.get(SHOPIFY_IS_AWESOME)[imageUrl] || false;\n\n\t\t\treturn { ...image, ...{ id: id, imageUrl: imageUrl, isLiked: isLiked } };\n\t\t});\n\t};\n\n\t/**\n\t * @description The toggleLiked() function toggles the like status of the image in the props, as well as updates the value in local storage. If an image is liked, it is added to local storage, and if it unliked, it is removed from local storage\n\t * @param index The array index of the image object in the image array\n\t */\n\tconst toggleLiked = (index: number): void => {\n\t\tconst newArr: Image[] = [...images];\n\n\t\tnewArr[index] = {\n\t\t\t...newArr[index],\n\t\t\t...{ isLiked: !newArr[index].isLiked },\n\t\t};\n\n\t\tif (store.get(SHOPIFY_IS_AWESOME))\n\t\t\tupdateLikeStatusInLocalStorage(SHOPIFY_IS_AWESOME, newArr, index);\n\n\t\tsetImages(newArr);\n\t};\n\treturn (\n\t\t<Fragment>\n\t\t\t{isLoading ? (\n\t\t\t\t<CircularProgress />\n\t\t\t) : (\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t{images.map((image: Image, index: number) => (\n\t\t\t\t\t\t<ImageCard key={index} image={image} toggleLiked={toggleLiked} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Fragment>\n\t);\n};\n\nexport default ImageContainer;\n","export const API_KEY: string = `U2TiaNUBuC9WfVnbkXciJtbq7Z5KJxaFrnJkx0nJ`;\n","import { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport './App.css';\n\nimport SelectionBar from './components/SelectionBar';\nimport Layout from './components/Layout';\nimport ImageContainer from './components/ImageContainer';\n\nimport store from './storage';\n\nimport { SHOPIFY_IS_AWESOME, PERSONAL_WEBSITE_URL } from './constants';\n\nfunction App() {\n\tconst [startDate, setStartDate] = useState<string>(\n\t\tmoment().format('YYYY-MM-DD')\n\t);\n\tconst [clicker, setClicker] = useState<number>(0); // The clicker state acts as a counter to detect when the user clicks\n\tconst [buttonDisabled, setButtonDisabled] = useState<boolean>(false); // The disabled state of the pull images button\n\n\t// Creating a dictionary in local storage to store the like status of each image\n\tuseEffect(() => {\n\t\tif (!store.get(SHOPIFY_IS_AWESOME)) store.set(SHOPIFY_IS_AWESOME, {});\n\t}, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Layout>\n\t\t\t\t<header role=\"banner\">\n\t\t\t\t\t<h1 className=\"header-title\">Spacestagram</h1>\n\t\t\t\t\t<h2 className=\"subheader-title\">\n\t\t\t\t\t\tImage-sharing from{' '}\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclassName=\"easter-egg\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\twindow.open(PERSONAL_WEBSITE_URL);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tthe final frontier\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</h2>\n\t\t\t\t</header>\n\t\t\t\t<main role=\"main\">\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<SelectionBar\n\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\tclicker={clicker}\n\t\t\t\t\t\t\tsetStartDate={setStartDate}\n\t\t\t\t\t\t\tsetClicker={setClicker}\n\t\t\t\t\t\t\tbuttonDisabled={buttonDisabled}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<ImageContainer\n\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\tclicker={clicker}\n\t\t\t\t\t\t\tsetButtonDisabled={setButtonDisabled}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</section>\n\t\t\t\t</main>\n\t\t\t</Layout>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}