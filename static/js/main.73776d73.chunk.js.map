{"version":3,"sources":["components/DatePicker/index.ts","components/DatePicker/DatePicker.tsx","components/SelectionBar/index.ts","components/SelectionBar/SelectionBar.tsx","components/Layout/index.ts","components/Layout/Layout.tsx","storage.ts","components/ImageCard/index.ts","components/ImageCard/ImageCard.tsx","components/DisplayGrid/index.ts","components/DisplayGrid/DisplayGrid.tsx","constants.ts","api.ts","components/ImageContainer/index.ts","components/ImageContainer/ImageContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DatePicker","id","label","date","onChange","Fragment","libInstance","moment","utils","MomentUtils","disableToolbar","allowKeyboardControl","variant","format","margin","autoOk","inputValue","value","rifmFormatter","str","maxDate","Date","KeyboardButtonProps","SelectionBar","startDate","clicker","setStartDate","setClicker","className","aria-label","aria-labelledby","type","onClick","Layout","children","store","require","ImageCard","image","useState","isExpanded","setExpanded","get","imageUrl","isLiked","setLiked","title","explanation","useEffect","set","alt","src","aria-pressed","aria-expanded","DisplayGrid","isLoading","images","CircularProgress","map","index","API_URL","client","axios","create","baseURL","timeout","axiosRetry","retries","shouldResetTimeout","retryDelay","retryCount","ImageContainer","setImages","setLoading","endDate","fetchImages","URL","API","then","response","processImages","data","catch","err","console","log","alert","finally","media_type","thumbnail_url","url","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73776d73.chunk.js","sourcesContent":["import DatePicker from \"./DatePicker\";\n\nexport default DatePicker\n","import React, { ReactElement } from 'react'\nimport {\n\tMuiPickersUtilsProvider,\n\tKeyboardDatePicker,\n} from '@material-ui/pickers'\nimport MomentUtils from '@date-io/moment'\nimport moment from 'moment'\n\nimport './styles.scss'\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date'\n\ntype Props = {\n\tid: string\n\tlabel: string\n\tdate: string\n\tonChange: (date: string) => void\n}\n\n/**\n * @description The DataPicker component is a component for selecting dates using the Material UI Pickers\n *\n * @param {string} id\n * @param {string} label\n * @param {moment} date\n * @param {function} handleDateChange\n * @returns ReactElement\n */\nconst DatePicker = ({ id, label, date, onChange }: Props): ReactElement => {\n\tconst handleFormattedDateChange = (date: MaterialUiPickersDate): void => {\n\t\tif (date) onChange(date.format('YYYY-MM-DD'))\n\t}\n\n\tconst dateFormatter = (str: string): string => {\n\t\treturn str\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<MuiPickersUtilsProvider libInstance={moment} utils={MomentUtils}>\n\t\t\t\t<KeyboardDatePicker\n\t\t\t\t\tid={id}\n\t\t\t\t\tlabel={label}\n\t\t\t\t\tdisableToolbar\n\t\t\t\t\tallowKeyboardControl\n\t\t\t\t\tvariant=\"inline\"\n\t\t\t\t\tformat=\"YYYY-MM-DD\"\n\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\tautoOk={true}\n\t\t\t\t\tinputValue={date}\n\t\t\t\t\tvalue={date}\n\t\t\t\t\tonChange={handleFormattedDateChange}\n\t\t\t\t\trifmFormatter={dateFormatter}\n\t\t\t\t\tmaxDate={new Date()}\n\t\t\t\t\tKeyboardButtonProps={{\n\t\t\t\t\t\t'aria-label': 'change date',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</MuiPickersUtilsProvider>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default DatePicker\n","import SelectionBar from './SelectionBar';\n\nexport default SelectionBar;\n","import React, { ReactElement } from 'react'\n\nimport DatePicker from './../DatePicker'\n\nimport './styles.scss'\n\ntype Props = {\n\tstartDate: string\n\tclicker: number\n\tsetStartDate: (startDate: string) => void\n\tsetClicker: (clicker: number) => void\n}\n\nconst SelectionBar = ({\n\tstartDate,\n\tclicker,\n\tsetStartDate,\n\tsetClicker,\n}: Props): ReactElement => {\n\tconst handlePullImagesButtonClick = (): void => {\n\t\tsetClicker(clicker + 1)\n\t}\n\n\treturn (\n\t\t<div id=\"selection-bar\" className=\"selection-bar\">\n\t\t\t<DatePicker\n\t\t\t\tid=\"start-date\"\n\t\t\t\tlabel=\"Select Start Date\"\n\t\t\t\tdate={startDate}\n\t\t\t\tonChange={setStartDate}\n\t\t\t\taria-label=\"Select Start Date\"\n\t\t\t\taria-labelledby=\"selection-bar\"\n\t\t\t/>\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclassName=\"btn ripple\"\n\t\t\t\tonClick={handlePullImagesButtonClick}\n\t\t\t\taria-label=\"Click Here To Pull Images\"\n\t\t\t\taria-labelledby=\"selection-bar\"\n\t\t\t>\n\t\t\t\tClick Here To Pull Images\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default SelectionBar\n","import Layout from \"./Layout\";\n\nexport default Layout;\n","import React, { Fragment, ReactElement } from 'react';\n\nimport \"./styles.scss\";\n\ntype Props = {\n    children: ReactElement[];\n}\n\nconst Layout = ({ children }: Props): ReactElement => {\n    return (\n        <div className=\"layout\">\n            {children}\n        </div>\n    )\n}\n\nexport default Layout;\n","const store = require(\"store\");\n\nexport default store;\n","import ImageCard from \"./ImageCard\";\n\nexport default ImageCard\n","import React, { ReactElement, useEffect, useState } from 'react'\n\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder'\nimport FavoriteIcon from '@material-ui/icons/Favorite'\n\nimport './styles.scss'\n\nimport store from './../../storage'\n\ntype Props = {\n\timage: any\n}\n\nconst ImageCard = ({ image }: Props): ReactElement => {\n\tconst [isExpanded, setExpanded] = useState<boolean>(false)\n\tconst [isLiked, setLiked] = useState<boolean>(\n\t\tstore.get(image.imageUrl) || false\n\t)\n\n\tconst { date, title, imageUrl, explanation } = image\n\n\tuseEffect(() => {\n\t\tstore.set(imageUrl, isLiked)\n\t}, [isLiked])\n\n\tconst toggleLiked = (): void => {\n\t\tsetLiked(!isLiked)\n\t}\n\n\tconst toggleExpanded = (): void => {\n\t\tsetExpanded(!isExpanded)\n\t}\n\n\treturn (\n\t\t<div id=\"image-card\" className=\"image-card\">\n\t\t\t<div id=\"image-header\">\n\t\t\t\t<p\n\t\t\t\t\tid=\"image-title\"\n\t\t\t\t\tclassName=\"image-title\"\n\t\t\t\t\taria-label={title}\n\t\t\t\t\taria-labelledby=\"image-header\"\n\t\t\t\t>\n\t\t\t\t\t{title}\n\t\t\t\t</p>\n\t\t\t\t<p\n\t\t\t\t\tid=\"image-date\"\n\t\t\t\t\tclassName=\"image-date\"\n\t\t\t\t\taria-label={date}\n\t\t\t\t\taria-labelledby=\"image-header\"\n\t\t\t\t>\n\t\t\t\t\t{date}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<img\n\t\t\t\tid=\"image-media\"\n\t\t\t\talt={title}\n\t\t\t\tsrc={imageUrl}\n\t\t\t\tclassName=\"image-media\"\n\t\t\t/>\n\t\t\t<div className=\"btn-section\">\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tid=\"like-button\"\n\t\t\t\t\t\tclassName=\"like-btn\"\n\t\t\t\t\t\tonClick={toggleLiked}\n\t\t\t\t\t\taria-pressed={isLiked}\n                        aria-label=\"Like Button\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{isLiked ? (\n\t\t\t\t\t\t\t<FavoriteIcon className=\"liked-btn\" />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<FavoriteBorderIcon />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tid=\"expand-button\"\n\t\t\t\t\t\tclassName=\"expand-btn\"\n\t\t\t\t\t\tonClick={toggleExpanded}\n\t\t\t\t\t\taria-expanded={isExpanded}\n                        aria-label=\"Expand Button\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ExpandMoreIcon\n\t\t\t\t\t\t\tclassName={`expand ${\n\t\t\t\t\t\t\t\tisExpanded ? 'expand-open' : ''\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{isExpanded && (\n\t\t\t\t<div\n\t\t\t\t\tid=\"image-description\"\n\t\t\t\t\tclassName=\"image-description\"\n\t\t\t\t\taria-label={explanation}\n\t\t\t\t\taria-labelledby=\"expand-button\"\n\t\t\t\t>\n\t\t\t\t\t{explanation}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport default ImageCard\n","import DisplayGrid from \"./DisplayGrid\"\n\nexport default DisplayGrid;\n","import React, { Fragment, ReactElement } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ImageCard from \"./../ImageCard\";\n\nimport \"./styles.scss\";\n\ntype Props = {\n    isLoading: boolean;\n    images: any[]\n}\n\nconst DisplayGrid = ({ isLoading, images }: Props): ReactElement => {\n    return (\n        <Fragment>\n            {isLoading ? (\n                <CircularProgress />\n            ) : (\n                <div className=\"grid\">\n                    {images.map((image: any, index: number) => (\n                        <ImageCard key={index} image={image} />\n                    ))}\n                </div>\n            )}\n        </Fragment>\n    );\n}\n\nexport default DisplayGrid;\n","export const API_KEY = `U2TiaNUBuC9WfVnbkXciJtbq7Z5KJxaFrnJkx0nJ`;\n\nexport const API_URL = `https://api.nasa.gov/planetary/apod`;\n","import axios from 'axios'\nimport axiosRetry from 'axios-retry'\n\nimport { API_URL } from './constants'\n\nconst client = axios.create({\n\tbaseURL: API_URL,\t\t\t // assigning base URL for endpoints\n\ttimeout: 10_000,\t\t\t // setting timeout to 10 seconds\n})\n\naxiosRetry(client, {\n\tretries: 3,\t\t\t\t\t // number of retries before giving up\n\tshouldResetTimeout: true,\t // resetting timeout between each retry\n\tretryDelay: retryCount => {\n\t\treturn retryCount * 2000 // time interval between retries\n\t},\n})\n\nexport default client\n","import ImageContainer from \"./ImageContainer\";\n\nexport default ImageContainer;\n","import React, { Fragment, ReactElement, useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport { AxiosResponse } from \"axios\";\n\nimport DisplayGrid from \"./../DisplayGrid\"\n\nimport API from \"./../../api\";\nimport { API_URL, API_KEY } from \"./../../constants\";\n\nimport \"./styles.scss\";\n\ntype Props = {\n    startDate: string;\n    clicker: number\n}\n\nconst ImageContainer = ({ startDate, clicker }: Props): ReactElement => {\n    const [images, setImages] = useState<any[]>([]);\n    const [isLoading, setLoading] = useState<boolean>(false);\n\n    const endDate: string = moment().format(\"YYYY-MM-DD\");\n\n    useEffect(() => {\n        fetchImages();\n    }, [clicker])\n\n    // Fetching images from NASA API, timeout set to 10 seconds\n    const fetchImages = (): void => {\n        setLoading(true);\n        const URL: string = `${API_URL}?api_key=${API_KEY}&start_date=${startDate}&end_date=${endDate}&thumbs=true`;\n        API\n            .get(URL)\n            .then((response: AxiosResponse<any>) => {\n                setImages(processImages(response.data));\n            })\n            .catch((err: any) => {\n                console.log(err);\n                alert(`Error occurred while fetching images. Please try again!`);\n                setImages([]);\n            })\n            .finally(() => {\n                setLoading(false);\n            })\n    }\n\n    // Retrieving the appropriate image url for each image object (for the case where the media type is video and so the url property points to a video and not an image)\n    const processImages = (images: any[]): any[] => {\n        return images.map((image: any): void => {\n            const { media_type, thumbnail_url, url } = image;\n\n            // If media_type is video and then assign the video thumbnail as the display image\n            const imageUrl = (media_type === \"video\" && thumbnail_url !== \"\") ? thumbnail_url : url;\n\n            return { ...image, ...{ imageUrl: imageUrl } };\n        })\n    }\n\n    return <DisplayGrid images={images} isLoading={isLoading} />\n}\n\nexport default ImageContainer\n","import React, { useState } from 'react'\nimport moment from 'moment'\n\nimport logo from './logo.svg'\nimport './App.css'\n\nimport SelectionBar from './components/SelectionBar'\nimport Layout from './components/Layout'\nimport ImageContainer from './components/ImageContainer'\n\nfunction App() {\n\tconst [startDate, setStartDate] = useState<string>(\n\t\tmoment().format('YYYY-MM-DD')\n\t)\n\tconst [clicker, setClicker] = useState<number>(0)\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Layout>\n\t\t\t\t<header>\n\t\t\t\t\t<h1 className=\"header-title\">Spacestagram</h1>\n\t\t\t\t\t<h2 className=\"subheader-title\">\n\t\t\t\t\t\tImage-sharing from the final frontier\n\t\t\t\t\t</h2>\n\t\t\t\t</header>\n\t\t\t\t<main>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<SelectionBar\n\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\tclicker={clicker}\n\t\t\t\t\t\t\tsetStartDate={setStartDate}\n\t\t\t\t\t\t\tsetClicker={setClicker}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<ImageContainer\n\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\tclicker={clicker}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</section>\n\t\t\t\t</main>\n\t\t\t</Layout>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}