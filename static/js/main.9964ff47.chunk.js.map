{"version":3,"sources":["components/DatePicker/index.ts","components/DatePicker/DatePicker.tsx","components/SelectionBar/index.ts","components/SelectionBar/SelectionBar.tsx","components/Layout/index.ts","components/Layout/Layout.tsx","storage.ts","constants.ts","components/ImageCard/index.ts","components/ImageCard/ImageCard.tsx","components/DisplayGrid/index.ts","components/DisplayGrid/DisplayGrid.tsx","api.ts","components/ImageContainer/index.ts","components/ImageContainer/ImageContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DatePicker","id","label","date","onChange","handleDateChange","value","libInstance","moment","utils","MomentUtils","disableToolbar","variant","format","margin","autoOk","inputValue","maxDate","Date","KeyboardButtonProps","SelectionBar","startDate","clicker","setStartDate","setClicker","className","aria-label","type","onClick","Layout","children","store","require","API_URL","SHOPIFY_IS_AWESOME","ImageCard","image","useState","isExpanded","setExpanded","get","imageUrl","isLiked","setLiked","title","explanation","useEffect","set","alt","src","aria-pressed","aria-expanded","aria-controls","role","hidden","aria-labelledby","aria-hidden","DisplayGrid","isLoading","images","CircularProgress","map","index","client","axios","create","baseURL","timeout","axiosRetry","retries","shouldResetTimeout","retryDelay","retryCount","ImageContainer","setImages","setLoading","endDate","fetchImages","URL","API","then","response","processImages","data","catch","err","console","log","alert","finally","media_type","thumbnail_url","url","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9964ff47.chunk.js","sourcesContent":["import DatePicker from './DatePicker';\n\nexport default DatePicker;\n","import { ReactElement } from 'react';\nimport {\n\tMuiPickersUtilsProvider,\n\tKeyboardDatePicker,\n} from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport moment from 'moment';\n\nimport './styles.scss';\n\ntype Props = {\n\tid: string;\n\tlabel: string;\n\tdate: string;\n\tonChange: (date: string) => void;\n};\n\n/**\n * @description The DataPicker component is a component for selecting dates using the Material UI Pickers\n *\n * @param {string} id\n * @param {string} label\n * @param {string} date\n * @param {function} onChange\n * @returns ReactElement\n */\nconst DatePicker = ({ id, label, date, onChange }: Props): ReactElement => {\n\tconst handleDateChange = (value: string) => {\n\t\tonChange(value);\n\t};\n\n\treturn (\n\t\t<MuiPickersUtilsProvider libInstance={moment} utils={MomentUtils}>\n\t\t\t<KeyboardDatePicker\n\t\t\t\tid={id}\n\t\t\t\tlabel={label}\n\t\t\t\tdisableToolbar // Disable toolbar on date picker\n\t\t\t\tvariant=\"inline\"\n\t\t\t\tformat=\"YYYY-MM-DD\"\n\t\t\t\tmargin=\"normal\"\n\t\t\t\tautoOk={true}\n\t\t\t\tinputValue={date}\n\t\t\t\tvalue={date}\n\t\t\t\tonChange={(date, value) => handleDateChange(value as string)}\n\t\t\t\tmaxDate={new Date()} // Set today's date as the max start date\n\t\t\t\tKeyboardButtonProps={{\n\t\t\t\t\t'aria-label': 'change date',\n\t\t\t\t}}\n\t\t\t/>\n\t\t</MuiPickersUtilsProvider>\n\t);\n};\n\nexport default DatePicker;\n","import SelectionBar from './SelectionBar';\n\nexport default SelectionBar;\n","import { ReactElement } from 'react';\n\nimport DatePicker from './../DatePicker';\n\nimport './styles.scss';\n\ntype Props = {\n\tstartDate: string;\n\tclicker: number;\n\tsetStartDate: (startDate: string) => void;\n\tsetClicker: (clicker: number) => void;\n};\n\n/**\n * @description The SelectionBar is a component that allows the user to select their input for the API as well as allows them to fetch the images\n *\n * @param {string} startDate\n * @param {number} clicker\n * @param {function} setStartDate\n * @param {function} setClicker\n * @returns ReactElement\n */\nconst SelectionBar = ({\n\tstartDate,\n\tclicker,\n\tsetStartDate,\n\tsetClicker,\n}: Props): ReactElement => {\n\tconst handlePullImagesButtonClick = (): void => {\n\t\tsetClicker(clicker + 1);\n\t};\n\n\treturn (\n\t\t<div id=\"selection-bar\" className=\"selection-bar\">\n\t\t\t{/* The date input component to select the starting date for the API  */}\n\t\t\t<DatePicker\n\t\t\t\tid=\"start-date\"\n\t\t\t\tlabel=\"Select Start Date\"\n\t\t\t\tdate={startDate}\n\t\t\t\tonChange={setStartDate}\n\t\t\t\taria-label=\"Select Start Date\"\n\t\t\t/>\n\n\t\t\t{/* The button that is clicked to pull the data from the API  */}\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tclassName=\"btn ripple\"\n\t\t\t\tonClick={handlePullImagesButtonClick}\n\t\t\t\taria-label=\"Click Here To Pull Images\"\n\t\t\t>\n\t\t\t\tClick Here To Pull Images\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default SelectionBar;\n","import Layout from './Layout';\n\nexport default Layout;\n","import { ReactElement } from 'react';\n\nimport './styles.scss';\n\ntype Props = {\n\tchildren: ReactElement[];\n};\n\n/**\n * @description The Layout component is a component that contains all of the elements of the website\n *\n * @param {ReactElement[]} children\n * @returns ReactElement\n */\nconst Layout = ({ children }: Props): ReactElement => {\n\treturn <div className=\"layout\">{children}</div>;\n};\n\nexport default Layout;\n","const store = require('store');\n\nexport default store;\n","export const API_KEY = `U2TiaNUBuC9WfVnbkXciJtbq7Z5KJxaFrnJkx0nJ`;\n\nexport const API_URL = `https://api.nasa.gov/planetary/apod`;\n\nexport const SHOPIFY_IS_AWESOME = `Shopify_is_Awesome`; // Key used to store like status of each image in local storage\n","import ImageCard from './ImageCard';\n\nexport default ImageCard;\n","import { ReactElement, useEffect, useState } from 'react';\n\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\nimport './styles.scss';\n\nimport store from './../../storage';\n\nimport { SHOPIFY_IS_AWESOME } from './../../constants';\n\ntype Props = {\n\timage: any;\n};\n\n/**\n * @description The ImageCard component is a component for displaying the information about each image\n *\n * @param {object} image\n * @returns ReactElement\n */\nconst ImageCard = ({ image }: Props): ReactElement => {\n\tconst [isExpanded, setExpanded] = useState<boolean>(false);\n\tconst [isLiked, setLiked] = useState<boolean>(\n\t\tstore.get(SHOPIFY_IS_AWESOME)[image.imageUrl] || false\n\t);\n\n\tconst { id, date, title, imageUrl, explanation } = image;\n\n\tuseEffect(() => {\n\t\t// Changing the like status of the image in local storage\n\t\tstore.set(SHOPIFY_IS_AWESOME, {\n\t\t\t...store.get(SHOPIFY_IS_AWESOME),\n\t\t\t...{ [imageUrl]: isLiked },\n\t\t});\n\t}, [isLiked]);\n\n\tconst toggleLiked = (): void => {\n\t\tsetLiked(!isLiked);\n\t};\n\n\tconst toggleExpanded = (): void => {\n\t\tsetExpanded(!isExpanded);\n\t};\n\n\treturn (\n\t\t<div id={`image-card-${id}`} className=\"image-card\">\n\t\t\t<div id={`image-header-${id}`}>\n\t\t\t\t<div\n\t\t\t\t\tid={`image-title-${id}`}\n\t\t\t\t\tclassName=\"image-title\"\n\t\t\t\t\taria-label={title}\n\t\t\t\t>\n\t\t\t\t\t<p>{title}</p>\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tid={`image-date-${id}`}\n\t\t\t\t\tclassName=\"image-date\"\n\t\t\t\t\taria-label={date}\n\t\t\t\t>\n\t\t\t\t\t<p>{date}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<img\n\t\t\t\tid={`image-media-${id}`}\n\t\t\t\tclassName=\"image-media\"\n\t\t\t\talt={title}\n\t\t\t\tsrc={imageUrl}\n\t\t\t/>\n\t\t\t<div className=\"btn-section\">\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tid={`like-button-${id}`}\n\t\t\t\t\t\tclassName=\"like-btn\"\n\t\t\t\t\t\tonClick={toggleLiked}\n\t\t\t\t\t\taria-pressed={isLiked}\n\t\t\t\t\t\taria-label=\"Like Button\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{isLiked ? (\n\t\t\t\t\t\t\t<FavoriteIcon className=\"liked-btn\" />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<FavoriteBorderIcon />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tid={`expand-button-${id}`}\n\t\t\t\t\t\tclassName=\"expand-btn\"\n\t\t\t\t\t\tonClick={toggleExpanded}\n\t\t\t\t\t\taria-expanded={isExpanded}\n\t\t\t\t\t\taria-label=\"Expand Button\"\n\t\t\t\t\t\taria-controls=\"image-description\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ExpandMoreIcon\n\t\t\t\t\t\t\tclassName={`expand ${\n\t\t\t\t\t\t\t\tisExpanded ? 'expand-open' : ''\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\trole=\"region\"\n\t\t\t\tid={`image-description-${id}`}\n\t\t\t\tclassName=\"image-description\"\n\t\t\t\thidden={!isExpanded}\n\t\t\t\taria-label={explanation}\n\t\t\t\taria-labelledby={`expand-button-${id}`}\n\t\t\t\taria-hidden={!isExpanded}\n\t\t\t>\n\t\t\t\t<p>{explanation}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ImageCard;\n","import DisplayGrid from './DisplayGrid';\n\nexport default DisplayGrid;\n","import { Fragment, ReactElement } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ImageCard from './../ImageCard';\n\nimport './styles.scss';\n\ntype Props = {\n\tisLoading: boolean;\n\timages: any[];\n};\n\n/**\n * @description The DisplayGrid component is a component for displaying all of the images\n *\n * @param {boolean} isLoading\n * @param {object[]} images\n * @returns ReactElement\n */\nconst DisplayGrid = ({ isLoading, images }: Props): ReactElement => {\n\treturn (\n\t\t<Fragment>\n\t\t\t{isLoading ? (\n\t\t\t\t<CircularProgress />\n\t\t\t) : (\n\t\t\t\t<div className=\"grid\">\n\t\t\t\t\t{images.map((image: any, index: number) => (\n\t\t\t\t\t\t<ImageCard key={index} image={image} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Fragment>\n\t);\n};\n\nexport default DisplayGrid;\n","import axios from 'axios';\nimport axiosRetry from 'axios-retry';\n\nimport { API_URL } from './constants';\n\nconst client = axios.create({\n\tbaseURL: API_URL, // assigning base URL for endpoints\n\ttimeout: 10_000, // setting timeout to 10 seconds\n});\n\naxiosRetry(client, {\n\tretries: 3, // number of retries before giving up\n\tshouldResetTimeout: true, // resetting timeout between each retry\n\tretryDelay: retryCount => {\n\t\treturn retryCount * 2000; // time interval between retries\n\t},\n});\n\nexport default client;\n","import ImageContainer from './ImageContainer';\n\nexport default ImageContainer;\n","import { ReactElement, useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { AxiosResponse } from 'axios';\n\nimport DisplayGrid from './../DisplayGrid';\n\nimport API from './../../api';\nimport { API_URL, API_KEY } from './../../constants';\n\nimport './styles.scss';\n\ntype Props = {\n\tstartDate: string;\n\tclicker: number;\n};\n\n/**\n * @description The ImageContainer component is a component for fetching the images from NASA's API before displaying them. (Employs the Container Component Pattern to separate the logic and the view)\n *\n * @param {string} startDate\n * @param {number} clicker\n * @returns ReactElement\n */\nconst ImageContainer = ({ startDate, clicker }: Props): ReactElement => {\n\tconst [images, setImages] = useState<any[]>([]);\n\tconst [isLoading, setLoading] = useState<boolean>(false);\n\n\tconst endDate: string = moment().format('YYYY-MM-DD');\n\n\tuseEffect(() => {\n\t\tfetchImages();\n\t}, [clicker]);\n\n\t// Fetching images from NASA API, timeout set to 10 seconds\n\tconst fetchImages = (): void => {\n\t\tsetLoading(true);\n\t\tconst URL: string = `${API_URL}?api_key=${API_KEY}&start_date=${startDate}&end_date=${endDate}&thumbs=true`;\n\t\tAPI.get(URL)\n\t\t\t.then((response: AxiosResponse<any>) => {\n\t\t\t\tsetImages(processImages(response.data));\n\t\t\t})\n\t\t\t.catch((err: any) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\talert(`Error occurred while fetching images.`);\n\t\t\t\tsetImages([]);\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tsetLoading(false);\n\t\t\t});\n\t};\n\n\t// Retrieving the appropriate image url for each image object (for the case where the media type is video and so the url property points to a video and not an image)\n\tconst processImages = (images: any[]): any[] => {\n\t\treturn images.map((image: any, index: number): any => {\n\t\t\tconst { media_type, thumbnail_url, url } = image;\n\n\t\t\t// As the API does not return any unique id for each image and the code is only using the id for accessiblity purposes, we are considering the array index as our unique id\n\t\t\tconst id: number = index;\n\n\t\t\t// If media_type is video and then assign the video thumbnail as the display image\n\t\t\tconst imageUrl =\n\t\t\t\tmedia_type === 'video' && thumbnail_url !== ''\n\t\t\t\t\t? thumbnail_url\n\t\t\t\t\t: url;\n\n\t\t\treturn { ...image, ...{ id: id, imageUrl: imageUrl } };\n\t\t});\n\t};\n\n\treturn <DisplayGrid images={images} isLoading={isLoading} />;\n};\n\nexport default ImageContainer;\n","import { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport './App.css';\n\nimport SelectionBar from './components/SelectionBar';\nimport Layout from './components/Layout';\nimport ImageContainer from './components/ImageContainer';\n\nimport store from './storage';\n\nimport { SHOPIFY_IS_AWESOME } from './constants';\n\nfunction App() {\n\tconst [startDate, setStartDate] = useState<string>(\n\t\tmoment().format('YYYY-MM-DD')\n\t);\n\tconst [clicker, setClicker] = useState<number>(0); // The clicker state acts as a counter to detect when the user clicks\n\n\t// Creating a dictionary in local storage to store the like status of each image\n\tuseEffect(() => {\n\t\tif (!store.get(SHOPIFY_IS_AWESOME)) store.set(SHOPIFY_IS_AWESOME, {});\n\t}, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Layout>\n\t\t\t\t<header role=\"banner\">\n\t\t\t\t\t<h1 className=\"header-title\">Spacestagram</h1>\n\t\t\t\t\t<h2 className=\"subheader-title\">\n\t\t\t\t\t\tImage-sharing from the final frontier\n\t\t\t\t\t</h2>\n\t\t\t\t</header>\n\t\t\t\t<main role=\"main\">\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<SelectionBar\n\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\tclicker={clicker}\n\t\t\t\t\t\t\tsetStartDate={setStartDate}\n\t\t\t\t\t\t\tsetClicker={setClicker}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<ImageContainer\n\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\tclicker={clicker}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</section>\n\t\t\t\t</main>\n\t\t\t</Layout>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}